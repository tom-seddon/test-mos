                .include "submodules/beeb/include/beeb.s65"
                
*=0
                .dsection zp
                .cerror *>$100,"no"
*=$c000
                .dsection mos
*=$fe00
                .dsection test_data
*=$fffa
                .dsection vectors

;-------------------------------------------------------------------------
;-------------------------------------------------------------------------

                .section zp
write_y:
                .fill 1
write_x:
                .fill 1
write_dest:
                .fill 2
registers_index:
                .fill 1
registers_prefix:
                .fill 1
initial_a:
                .fill 1
initial_x:
                .fill 1
initial_y:
                .fill 1
initial_p:
                .fill 1
initial_s:
                .fill 1
initial_crtc:
                .fill 18
initial_system_via:
                .fill 16
initial_user_via:
                .fill 16
initial_romsel:
                .fill 1
initial_acccon:
                .fill 1
                
                .send zp

;-------------------------------------------------------------------------
;-------------------------------------------------------------------------

                .section mos
start:

                .fill 8192,$ff

;-------------------------------------------------------------------------
;-------------------------------------------------------------------------

reset: .proc
                ; initial CPU contents
                php
                sei
                cld
                sta initial_a
                stx initial_x
                sty initial_y
                pla
                sta initial_p
                tsx
                stx initial_s

                ; Sort out DRAM refresh quickly after boot. It doesn't
                ; matter that R0 gets overwritten - it's write-only.
                stz $fe00
                lda #128
                sta $fe01

;                 lda #240
; aloop:
;                 ldx #0
; xloop:
;                 ldy #0
; yloop:
;                 iny
;                 bne yloop
;                 inx
;                 bne xloop
;                 inc a
;                 bne aloop

                ; Clear whichever bit of display RAM is initially
                ; selected. (The ACCCON reset value can be tweaked to
                ; explicitly showing main or shadow RAM while paging
                ; in the other, to see which got filled with '.'.)
                lda #'.'
                jsr clear_display

                ; On my Master, TST=1 on initial power on, so the
                ; result here is just bogus.
                lda acccon
                sta initial_acccon

                ; ; reset ACCCON
                lda #0
                sta acccon
                
                ; initial paging
                lda romsel
                sta initial_romsel
                
                ; initial VIA contents
                ldx #15
-
                lda system_via,x
                sta initial_system_via,x
                lda user_via,x
                sta initial_user_via,x
                dex
                bpl -

                ; initial CRTC contents
                ldx #17
-
                stx $fe00
                lda $fe01
                sta initial_crtc,x
                dex
                bpl -

                ; normal(ish) code from here...
                jsr reset_display

;                 ldy #0
; -
;                 lda message,y
;                 beq +
;                 jsr write_char
;                 iny
;                 bra -
; +

                lda #'M'
                ldx #initial_a
                ldy #5
                jsr registers

                lda #'C'
                ldx #initial_crtc
                ldy #18
                jsr registers

                lda #'S'
                ldx #initial_system_via
                ldy #16
                jsr registers

                lda #'U'
                ldx #initial_user_via
                ldy #16
                jsr registers

                lda #'P'
                ldx #initial_romsel
                ldy #2
                jsr registers
                
-
                jmp -

message:
                .text 'hello from the test MOS',0

                .pend

;-------------------------------------------------------------------------
;-------------------------------------------------------------------------

registers: .proc
                sta registers_prefix
                stz registers_index
-
                lda registers_prefix
                jsr write_char

                lda registers_index
                jsr write_hex_byte

                lda #'='
                jsr write_char

                lda 0,x
                jsr write_hex_byte

                lda #' '
                jsr write_char
                jsr write_char

                inx
                
                inc registers_index
                cpy registers_index
                bne -

                rts
                
                .pend
                
;-------------------------------------------------------------------------
;-------------------------------------------------------------------------

reset_display: .proc
                stz write_x
                stz write_y

                ldx #crtc_regs.end-1-crtc_regs
-
                lda crtc_regs,x
                stx $fe00
                sta $fe01
                dex
                bpl -

                lda #$4a
                sta video_ula_control

                lda #32
                jsr clear_display
                rts
                .pend

clear_display: .proc
                ldx #0
-
                sta $7c00,x
                sta $7d00,x
                sta $7e00,x
                sta $7f00,x
                inx
                bne -

                rts
                .pend

;-------------------------------------------------------------------------
;-------------------------------------------------------------------------

get_hi_nybble_char: .proc
                lsr a
                lsr a
                lsr a
                lsr a
                jmp get_lo_nybble_char
                .pend

get_lo_nybble_char: .proc
                and #$0f
                clc
                sed
                adc #$90
                adc #$40
                cld
                rts
                .pend
                
write_hex_byte: .proc
                pha
                jsr get_hi_nybble_char
                jsr write_char
                pla
                jsr get_lo_nybble_char
                jmp write_char
                .pend
                
write_char: .proc
                phx
                phy
                ldx write_y
                ldy mode7_rows_lo,x
                sty write_dest+0
                ldy mode7_rows_hi,x
                sty write_dest+1
                ldy write_x
                sta (write_dest),y
                iny
                cpy #40
                bcs wrap_x
                sty write_x
                bra done
wrap_x:
                ; wrap to next row
                stz write_x
                inx
                cpx #25
                bcs wrap_y
                stx write_y
                bra done
wrap_y:
                stz write_y     ;should probably scroll
done:
                ply
                plx
                rts
                .pend
                
;-------------------------------------------------------------------------
;-------------------------------------------------------------------------

irq: .proc
                jmp irq
                .pend

;-------------------------------------------------------------------------
;-------------------------------------------------------------------------

nmi: .proc
                rti
                .pend

;-------------------------------------------------------------------------
;-------------------------------------------------------------------------

mode7_rows=$7c00+range(0,1000,40)
mode7_rows_lo:
                .byte <mode7_rows
mode7_rows_hi:
                .byte >mode7_rows
                
crtc_regs: .block
                .byte 63        ;r0
                .byte 40        ;r1
                .byte 51        ;r2
                .byte $24       ;r3
                .byte 30        ;r4
                .byte 2         ;r5
                .byte 25        ;r6
                .byte 27        ;r7
                .byte $d3       ;r8
                .byte 18        ;r9
                .byte $72       ;r10
                .byte $13       ;r11
                .byte $28       ;r12
                .byte $00       ;r13
end:
                .bend
                .send mos

;-------------------------------------------------------------------------
;-------------------------------------------------------------------------

                .section test_data
test_data: .block
                .fill 256,$ff
                .bend
                .send test_data
                
;-------------------------------------------------------------------------
;-------------------------------------------------------------------------

                .section vectors
nmiv:
                .word nmi
resetv:
                .word reset
irqv:
                .word irq
                .send vectors
